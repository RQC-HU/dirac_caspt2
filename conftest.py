import glob
import os
import shutil
from pathlib import Path
from typing import List, Tuple

import pytest

from module_testing import create_test_command_dcaspt2

slow_only_option = "--slowonly"
dev_option = "--dev"
runall_option = "--all"


def pytest_addoption(parser: pytest.Parser) -> None:
    parser.addoption(slow_only_option, action="store_true", default=False, help="run only very slow tests")
    parser.addoption(dev_option, action="store_true", default=False, help="run tests for development")
    parser.addoption(runall_option, action="store_true", default=False, help="run all tests")
    parser.addoption("-B", "--build-dir", action="store", default="build", help="build directory [default: build]")
    parser.addoption(
        "--mpi",
        type=int,
        default=1,
        help="run tests with MPI [default: 1]",
    )
    parser.addoption(
        "--omp",
        type=int,
        help="run tests with OpenMP. This option overrides the value of the OMP_NUM_THREADS environment variable. [default: $OMP_NUM_THREADS]",
    )
    parser.addoption("--save", action="store_true", default=False, help="Save the scratch directory generated by the tests without erasing it. [default: False]")
    parser.addoption("--rmscratch", action="store_true", default=False, help="Remove the scratch directories generated by the tests before running the tests. [default: False]")


@pytest.fixture
def mpi_num_process(request: pytest.FixtureRequest):
    return request.config.getoption("--mpi")


@pytest.fixture
def omp_num_threads(request: pytest.FixtureRequest):
    return request.config.getoption("--omp")


@pytest.fixture
def save(request: pytest.FixtureRequest):
    return request.config.getoption("--save")


@pytest.fixture(scope="function")
def env_setup_caspt2(request: pytest.FixtureRequest, mpi_num_process: int, omp_num_threads: int, save: bool) -> Tuple[Path, Path, Path, Path, str]:
    test_path = Path(request.fspath).parent
    # test_name is the name of the test file without the extension and the first test_.
    # (e.g.) /path/to/test/slow/c1_methane_slow/test_c1_methane_slow.py -> c1_methane_slow
    test_name = Path(request.fspath).stem[5:]

    input_file = "active.inp"
    ref_output_file = f"reference.{test_name}.out"
    output_filename = f"{test_name}.caspt2.out"
    latest_passed_output = f"latest_passed.{test_name}.caspt2.out"

    input_path = test_path / input_file
    ref_output_path = test_path / ref_output_file
    output_path = test_path / output_filename
    latest_passed_path = test_path / latest_passed_output
    dcaspt2 = request.config.build_dir / "dcaspt2"
    test_command = create_test_command_dcaspt2(dcaspt2, mpi_num_process, omp_num_threads, input_path, output_path, test_path, save)

    return (
        test_path,
        ref_output_path,
        output_path,
        latest_passed_path,
        test_command,
    )


@pytest.fixture(scope="function")
def env_setup_ivo(request: pytest.FixtureRequest, mpi_num_process: int, omp_num_threads: int, save: bool) -> Tuple[Path, Path, Path, Path, str]:
    test_path = Path(request.fspath).parent
    # test_name is the name of the test file without the extension and the first test_.
    # (e.g.) /path/to/test/dev/ivo_c32h_n2_dev_dirac22/test_ivo_c32h_n2_dev_dirac22.py -> ivo_c32h_n2_dev_dirac22
    test_name = Path(request.fspath).stem[5:]

    input_file = "active.ivo.inp"
    DFPCMONEW_file = "DFPCMONEW"
    ref_DFPCMONEW_file = "reference.DFPCMONEW"
    output_filename = f"{test_name}.ivo.out"
    latest_passed_output = f"latest_passed.{test_name}.ivo.out"

    input_path = test_path / input_file
    DFPCMONEW_path = test_path / DFPCMONEW_file
    ref_DFPCMONEW_path = test_path / ref_DFPCMONEW_file
    latest_passed_DFPCMONEW_path = test_path / latest_passed_output
    output_path = test_path / output_filename
    latest_passed_output_path = test_path / latest_passed_output
    dcaspt2 = request.config.build_dir / "dcaspt2"
    is_ivo = True
    test_command = create_test_command_dcaspt2(dcaspt2, mpi_num_process, omp_num_threads, input_path, output_path, test_path, save, is_ivo)

    return (
        test_path,
        DFPCMONEW_path,
        ref_DFPCMONEW_path,
        latest_passed_DFPCMONEW_path,
        output_path,
        latest_passed_output_path,
        test_command,
    )


@pytest.fixture(scope="function")
def env_setup_gen_restart_file(request: pytest.FixtureRequest) -> Tuple[Path, Path]:
    caller_name = request.function.__name__
    caller_path = Path(request.node.path).expanduser().resolve().parent

    gen_restart_path = request.config.build_dir / "gen_dcaspt2_restart"
    test_path = Path(request.node.path).parent
    input_path = caller_path / f"{caller_name}.in"
    expected_path = caller_path / f"expected_{caller_name}"
    return (gen_restart_path, test_path, input_path, expected_path)


def pytest_configure(config: pytest.Config) -> None:
    config.build_dir = Path(config.getoption("--build-dir")).expanduser().resolve()
    if not config.build_dir.exists():
        raise FileNotFoundError(f"build directory {config.build_dir} does not exist.")
    config.addinivalue_line("markers", "slowonly: mark test as slow to run")
    config.addinivalue_line("markers", "dev: mark test as for development")


def pytest_collection_modifyitems(config: pytest.Config, items: List[pytest.Item]) -> None:
    skip_slow = pytest.mark.skip(reason=f"need {runall_option} or {slow_only_option} option to run. REASON: slow test")
    skip_tests_because_dev = pytest.mark.skip(reason=f"need no option or {runall_option} option to run. REASON: --dev was activated")
    skip_fast_dev = pytest.mark.skip(reason=f"need no option or {dev_option} or {runall_option} option or  to run. REASON: --slowonly was activated")
    skip_fast_neutral = pytest.mark.skip(reason=f"need no option or {runall_option} option or  to run. REASON: --slowonly was activated")

    # --rmscratch option is used to remove the scratch directories before running the tests.
    if config.getoption("--rmscratch"):
        print("--rmscratch option was activated. Removing temporary directories before running the tests...")
        test_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(test_path)
        tmp_dirs = glob.glob("**/scratch", recursive=True)
        for dir in tmp_dirs:
            name = os.path.join(test_path, dir)
            print(f"Removing {name} directory...")
            shutil.rmtree(name, ignore_errors=True)
        print("End of removing temporary directories.")

    if config.getoption(runall_option):
        print("run all tests")
        return
    for item in items:
        # Check whether the test should be skipped or not.
        # The tests with item.add_marker("something") added will be skipped.

        # Tests marked by @pytest.mark.dev
        if item.get_closest_marker("dev"):
            # dev tests always run except when --slowonly was activated
            if config.getoption(slow_only_option):
                item.add_marker(skip_fast_dev)
            else:
                pass
        # Tests marked by @pytest.mark.slowonly
        elif item.get_closest_marker("slowonly"):
            # slow tests only run when --slowonly was activated
            if config.getoption(slow_only_option):
                pass
            else:
                item.add_marker(skip_slow)
        # Unmarked tests
        else:
            # Skip neutral tests if --dev or --slowonly were activated
            if config.getoption(dev_option):
                item.add_marker(skip_tests_because_dev)
            elif config.getoption(slow_only_option):
                item.add_marker(skip_fast_neutral)
