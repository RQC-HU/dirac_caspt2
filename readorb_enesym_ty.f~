! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   SUBROUTINE readorb_enesym_ty (filename) ! orbital energies in r4dmoin1

! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        use four_caspt2_module

        Implicit NONE

        integer :: mrconee, IMO, JMO, ISP,IRP, TELEC
        character*50,intent(in) :: filename
        integer :: j0, j, i, i0, i1, m
        integer :: k0, l0, ii, jj, kk, ll, nmomax, isym, jsym, ksym

        integer, allocatable :: dammo(:), UTCHEMIMO1(:,:), UTCHEMIMO2(:,:)

        real*8 :: w, ETOTAL
        logical :: breit

!  Write(UT_sys_ftmp) NMO,UT_molinp_atm_enm - DELETE, &
!                     BREIT,ETOTAL,scfru
!  Write(UT_sys_ftmp) NSYMRP,(REPN(IRP),IRP=1,NSYMRP)
!  Write(UT_sys_ftmp) ((UT_ptgsym_table_single(IJ,II),UT_ptgsym_table_double(IJ,II),IJ=0,NSYMRP-1),II=0,NSYMRP-1)
!  Write(UT_sys_ftmp) ((IRPMO(IMO,isp),ORBMO(IMO,isp), &
!                       UTCHEMIMO1(IMO,isp),UTCHEMIMO2(IMO,isp),IMO=1,NMO),isp=1,scfru)
!  Write(UT_sys_ftmp) (((ONE(JMO,IMO,isp),JMO=1,NMO),IMO=1,NMO),isp=1,scfru)

        mrconee=10

        open( mrconee, file=trim(filename),form ='unformatted', status='old', err=10)
        Read(mrconee) NMO, TELEC, BREIT, ECORE, scfru  ! NMO is nbas - ncore
        write(*,*) 'NMO, TELEC, BREIT, ECORE, scfru  ! NMO is nbas - ncore'
        write(*,*) NMO, TELEC, BREIT, ECORE, scfru  ! NMO is nbas - ncore

     ! allocate memory
     ! ---------------
!     allocate(ONE  (NMO,NMO,scfru))
!     allocate(IRPMO(NMO    ,scfru))
!     allocate(ORBMO(NMO    ,scfru))
!     allocate(ONE  (NMO,NMO))

     allocate(IRPMO(1:NMO    ))
     allocate(ORBMO(1:NMO    ))
     allocate(UTCHEMIMO1(1:NMO, 1:scfru))
     allocate(UTCHEMIMO2(1:NMO, 1:scfru))
     Call memplus(size(IRPMO ),kind(IRPMO ),1  )
     Call memplus(size(ORBMO ),kind(ORBMO ),1  )
     Call memplus(size(UTCHEMIMO1),kind(UTCHEMIMO1),1)
     Call memplus(size(UTCHEMIMO2),kind(UTCHEMIMO2),1)

     Read(mrconee) NSYMRP, (REPN_TY(IRP),IRP=1,NSYMRP)                         ! IRs chars

     write(*,*)' NSYMRP, (REPN_TY(IRP),IRP=1,NSYMRP)                         ! IRs chars'
     write(*,*) NSYMRP, (REPN_TY(IRP),IRP=1,NSYMRP)                         ! IRs chars


     allocate(MULTB_S(1:NSYMRP,1:NSYMRP))
     allocate(MULTB_D(1:NSYMRP,1:NSYMRP))  ! dagger 
     allocate(MULTB_DF(1:NSYMRP,1:NSYMRP)) ! forward
     allocate(MULTB_DB(1:NSYMRP,1:NSYMRP)) ! backward
     allocate(MULTB_DS(1:NSYMRP,1:NSYMRP))
     allocate(MULTB_SB(1:NSYMRP,1:NSYMRP))
     Call memplus(size(MULTB_S),kind(MULTB_S),1)
     Call memplus(size(MULTB_D),kind(MULTB_D),1)
     Call memplus(size(MULTB_DS),kind(MULTB_DS),1)
     Call memplus(size(MULTB_DF),kind(MULTB_DF),1)
     Call memplus(size(MULTB_DB),kind(MULTB_DB),1)
     Call memplus(size(MULTB_SB),kind(MULTB_SB),1)

!     Read(UT_sys_ftmp) ((MULTB_S(J,I),MULTB_D(J,I),J=0,NSYMRP-1),I=0,NSYMRP-1)
!     Read(UT_sys_ftmp) ((IRPMO(IMO,isp),ORBMO(IMO,isp), &
!                         UTCHEMIMO1(IMO,isp),UTCHEMIMO2(IMO,isp), &
!                         IMO=1,NMO),isp=1,scfru)                                ! orbital energies <= used here

    Read(mrconee) ((MULTB_S(J,I),MULTB_D(J,I),J=1,NSYMRP),I=1,NSYMRP)
    Read(mrconee) ((IRPMO(IMO),ORBMO(IMO), &
                         UTCHEMIMO1(IMO,isp),UTCHEMIMO2(IMO,isp), &
                         IMO=1,NMO),isp=1,scfru)                                ! orbital energies <= used here

     CLOSE(mrconee)

        deallocate (UTCHEMIMO1); Call memminus(KIND(UTCHEMIMO1),SIZE(UTCHEMIMO1),1)
        deallocate (UTCHEMIMO2); Call memminus(KIND(UTCHEMIMO2),SIZE(UTCHEMIMO2),1)

     write(*,*)'moint1 is closed.'
     irpmo(1:imo) = irpmo(1:imo) + 1       ! irrep starts from 1 

     Write(*,*)'MULTB_S'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_S(I,J),J=1,NSYMRP)
     End do

     MULTB_S = MULTB_S + 1
     MULTB_D = MULTB_D + 1

     Write(*,*)'MULTB_S'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_S(I,J),J=1,NSYMRP)
     End do

     Do jsym = 1, nsymrp
     Do isym = 1, nsymrp-1, 2
       MULTB_DF(isym+1,jsym) = MULTB_D(isym  , jsym)
       MULTB_DF(isym  ,jsym) = MULTB_D(isym+1, jsym)
     Enddo 
     Enddo 

     Do jsym = 1, nsymrp
     Do isym = 1, nsymrp
       ksym = MULTB_DF(isym, jsym) 
       MULTB_DB(isym ,ksym) = jsym
     Enddo 
     Enddo 

     Do jsym = 1, nsymrp
     Do isym = 1, nsymrp
       ksym = MULTB_S (isym, jsym) 
       MULTB_SB(isym ,ksym) = jsym
     Enddo 
     Enddo 

     Write(*,*)'MULTB_S'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_S(I,J),J=1,NSYMRP)
     End do

     Write(*,*)'MULTB_SB'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_SB(I,J),J=1,NSYMRP)
     End do

     Write(*,*)'MULTB_D'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_D(I,J),J=1,NSYMRP)
     End do

     Write(*,*)'MULTB_DF'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_DF(I,J),J=1,NSYMRP)
     End do

     Write(*,*)'MULTB_DB'
     Do I = 1, nsymrp
       Write(*,'(50I3)') (MULTB_DB(I,J),J=1,NSYMRP)
     End do

!     Write(*,'("UTCHEMIMO1",50I3)') (UTCHEMIMO1(IMO,1),IMO=1,nmo)
!     Write(*,'("UTCHEMIMO2",50I3)') (UTCHEMIMO2(IMO,1),IMO=1,nmo)
!     Write(*,'("IRPMO",50I3)') (IRPMO(IMO),IMO=1,nmo)
!     Write(*,'("ORBMO",20F10.4)') (ORBMO(IMO),IMO=1,nmo)

        Allocate(sp(1:nmo))    ;  Call memplus(KIND(sp),SIZE(sp),1)
        sp( 1                  : ninact             )    = 1
        sp( ninact+1           : ninact+nact        )    = 2
        sp( ninact+nact+1      : ninact+nact+nsec   )    = 3
        sp( ninact+nact+nsec+1 : nmo                )    = 4

        If(trim(ptgrp)=='C2h') then
           Call c2hsym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C4h') then
           Call c4hsym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C6h') then
           Call c6hsym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C8h') then
           Call c8hsym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C2') then
           Call c2sym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C4') then
           Call c4sym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C6') then
           Call c6sym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C8') then
           Call c8sym_sd (MULTB_DS) 
        elseif(trim(ptgrp)=='C1') then
           Call c1sym_sd (MULTB_DS) 
           MULTB_DS = 1
        else
           write(*,*)'Error: please use C1, C2, C8h, C6h, C4h,C2h.'
           stop
        endif
        nsymrpa = nsymrp

          Write(*,*) 'MULTB_DS'
          Do I = 1, nsymrp
          Write(*,'(50I3)') (MULTB_DS(I,J),J=1,NSYMRP)
        End do

        Allocate ( irpamo(nmo)); Call memplus(KIND(irpamo),SIZE(irpamo),1)
        Allocate ( orb   (nmo)); Call memplus(KIND(orb   ),SIZE(orb   ),1)
        Allocate ( indmo (nmo)); Call memplus(KIND(indmo ),SIZE(indmo ),1)
        Allocate ( indmor(nmo)); Call memplus(KIND(indmor),SIZE(indmor),1)
        Allocate ( dammo (nmo)); Call memplus(KIND(dammo ),SIZE(dammo ),1)
        
        indmo(:) = 0
        orb = orbmo

! orb is lower order of orbmo      

        do i0 = 1, nmo-1
           m = i0
           do j0 = i0+1, nmo
              if( orb(j0) < orb(m)) m = j0
           end do
           w = orb(i0) ; orb(i0) = orb(m) ; orb(m) = w
        end do

!         do i0 = 1, nmo
!            write(*,*)orb(i0)
!         end do

!         do i0 = 1, nmo
!            write(*,*)orbmo(i0)
!        end do

!! orb is lower order of orbmo      

        do i0 = 1, nmo, 2
              m = 0
           do j0 = 1, nmo
              if (orbmo(j0)== orb(i0)) then  ! orbmo(j0) is i0 th MO
                 if( m==0) then
                    indmo(i0) = j0
                    m = m+1
                 else
                    indmo(i0+1) = j0
                 endif
                    
              end if
           end do
        end do

        do i0 = 1,  nmo
           indmor(indmo(i0)) = i0  ! i0 is energetic order, indmo(i0) is symmtric order (MRCONEE order)
        end do

!        do i0 = 1,  nmo
!           write(*,'(2I4)')indmor(i0), indmo(i0), i0
!        end do

        orbmo = orb

        dammo = irpmo

        do i0 = 1,  nmo
           irpmo(i0) = dammo(indmo(i0))
           irpamo(i0) = dammo(indmo(i0))
        end do

           write(*,*)'inactive'
        do i0 = 1, ninact
           write(*,'(2I4,2X,E20.10,2X,I4)')i0,indmo(i0),orbmo(i0),irpmo(i0)
        end do

           write(*,*)'active'
        do i0 = ninact+1, ninact+nact
           write(*,'(2I4,2X,E20.10,2X,I4)')i0,indmo(i0),orbmo(i0),irpmo(i0)
        end do

           write(*,*)'secondary'
        do i0 = ninact+nact+1, ninact+nact+nsec
           write(*,'(2I4,2X,E20.10,2X,I4)')i0,indmo(i0),orbmo(i0),irpmo(i0)
        end do

!        do i0 = 1, nmo
!           indmo(i0)=i0
!        end do


        deallocate (dammo); Call memminus(KIND(dammo),SIZE(dammo),1)


        goto 1000

 10     write(*,*) 'err 0'   
        go to 1000
 11     write(*,*) 'err 1'   
        go to 1000
 12     write(*,*) 'err 2'   
        go to 1000
 13     write(*,*) 'err 3'   
        go to 1000
 14     write(*,*) 'err 4'   
        go to 1000

 1000   end subroutine readorb_enesym_ty

